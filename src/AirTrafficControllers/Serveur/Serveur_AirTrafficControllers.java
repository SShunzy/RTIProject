/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package AirTrafficControllers.Serveur;

import Classes.Lanes;
import Classes.Vols;
import database.utilities.BDBean;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.StringTokenizer;
import java.util.Vector;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author student
 */
public class Serveur_AirTrafficControllers extends javax.swing.JFrame implements ConsoleServeurAirTrafficControllers
{
    public static String MySQLConnexion = "jdbc:mysql://localhost:3306/BD_AIRPORT";
    public static String MySQLUsername = "root";
    public static String MySQLPassword = "rootmysql11";

    
    private int PORT_TOWER;
    private ThreadServeurAirTrafficControllers ts;
    /**
     * Creates new form Serveur_AirTrafficControllers
     */
    public Serveur_AirTrafficControllers() 
    {
        this.setTitle("Serveur Air Traffic Controllers");
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSeparator1 = new javax.swing.JSeparator();
        StartBT = new javax.swing.JButton();
        StopBT = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        ClientTable = new javax.swing.JTable();
        PortTF = new javax.swing.JTextField();
        ServeurL = new javax.swing.JLabel();
        PortL = new javax.swing.JLabel();
        ClientL = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        StartBT.setText("Lancer");
        StartBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StartBTActionPerformed(evt);
            }
        });

        StopBT.setText("Arrêter");
        StopBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StopBTActionPerformed(evt);
            }
        });

        ClientTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Origine", "Requete", "Thread"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane3.setViewportView(ClientTable);

        ServeurL.setText("        Serveur");

        PortL.setText("port d'écoute :");

        ClientL.setBackground(new java.awt.Color(255, 255, 0));
        ClientL.setText("         Clients");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addComponent(PortL)
                        .addGap(48, 48, 48)
                        .addComponent(PortTF))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(62, 62, 62)
                        .addComponent(StartBT)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(StopBT)))
                .addGap(61, 61, 61))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSeparator1)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(137, 137, 137)
                        .addComponent(ClientL, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(137, 137, 137)
                        .addComponent(ServeurL, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ServeurL, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(PortTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(PortL, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(StartBT)
                    .addComponent(StopBT))
                .addGap(27, 27, 27)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ClientL, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void StartBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StartBTActionPerformed
        PORT_TOWER = Integer.parseInt(PortTF.getText());
        TraceEvenements("serveur#acquisition du port#main");
        ts = new ThreadServeurAirTrafficControllers(PORT_TOWER, new ListeTachesAirTrafficControllers(), this);
        ts.start();
    }//GEN-LAST:event_StartBTActionPerformed

    private void StopServer(){
        if(ts!= null)
        {
            ts.Shutdown();
            this.StopTrace();
        }
    }
    
    private void StopBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StopBTActionPerformed
        this.StopServer();
    }//GEN-LAST:event_StopBTActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        this.StopServer();
        this.dispose();
    }//GEN-LAST:event_formWindowClosing

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) 
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Serveur_AirTrafficControllers.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Serveur_AirTrafficControllers.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Serveur_AirTrafficControllers.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Serveur_AirTrafficControllers.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Serveur_AirTrafficControllers().setVisible(true);
            }
        });
    }

    @Override
    public void TraceEvenements(String commentaire) 
    {
        Vector ligne = new Vector();
        StringTokenizer parser = new StringTokenizer(commentaire,"#");
        while (parser.hasMoreTokens())
        ligne.add(parser.nextToken());
        DefaultTableModel dtm = (DefaultTableModel)this.ClientTable.getModel();
        dtm.insertRow(dtm.getRowCount(),ligne);    }


    
    public void StopTrace()
    {
        DefaultTableModel dtm = (DefaultTableModel) this.ClientTable.getModel();
        for(int i = dtm.getRowCount()-1; i >= 0; i--)
            dtm.removeRow(i);
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel ClientL;
    private javax.swing.JTable ClientTable;
    private javax.swing.JLabel PortL;
    private javax.swing.JTextField PortTF;
    private javax.swing.JLabel ServeurL;
    private javax.swing.JButton StartBT;
    private javax.swing.JButton StopBT;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    // End of variables declaration//GEN-END:variables
 
    @Override
    public ArrayList<Vols> getAvailableFlights() throws SQLException {
            BDBean BD = new BDBean();
            
            BD.setConnection(Serveur_AirTrafficControllers.MySQLConnexion,Serveur_AirTrafficControllers.MySQLUsername ,Serveur_AirTrafficControllers.MySQLPassword );
            BD.setColumns("idVols, Destination, HeureDepart, HeureArriveePrevue, HeureArriveeEventuelle, idAvion, NbPlace, NomCompagnie, PrixVol");
            BD.setTable("Vols");
            BD.setCondition("");
            
            ResultSet rs = BD.Select(false);
            
            if(rs.last()){

            }
            else{
                System.err.println("Pas de vols trouvés");
                throw new SQLException();
            }
            rs.beforeFirst();
                
            ArrayList<Vols> FlightArray = new ArrayList<Vols>();
            
            while(rs.next())
            {
                FlightArray.add(new Vols(rs));
            }
            return FlightArray;
    }
    
    @Override
    public ArrayList<Lanes> getAvailableLanes() throws SQLException {
        BDBean BD = new BDBean();
            
        BD.setConnection(Serveur_AirTrafficControllers.MySQLConnexion,Serveur_AirTrafficControllers.MySQLUsername ,Serveur_AirTrafficControllers.MySQLPassword );
        BD.setColumns("*");
        BD.setTable("Pistes");
        BD.setCondition("NOT isOccupied");

        ResultSet rs = BD.Select(false);

        if(!rs.isBeforeFirst()){
            throw new SQLException();
        }
        ArrayList<Lanes> LanesArray = new ArrayList<>();

        while(rs.next())
        {
            LanesArray.add(new Lanes(rs));
        }
        System.out.println("nombre piste = "+LanesArray.size());
        return LanesArray;    
    }

    @Override
    public boolean lockAvailableLanes(int idLane) {
        try {
            BDBean BD = new BDBean();
            
            BD.setConnection(MySQLConnexion, MySQLUsername, MySQLPassword);
            BD.setTable("Pistes");
            BD.setValues("isOccupied = true");
            BD.setCondition("idPiste = "+idLane);
            int result = BD.Update();
            return result == 1;
            
        } catch (SQLException ex) {
            return false;
        }
    }
    
    @Override
    public boolean unlockLane(int idLane){
        try {
            BDBean BD = new BDBean();
            
            BD.setConnection(MySQLConnexion, MySQLUsername, MySQLPassword);
            BD.setTable("Pistes");
            BD.setValues("isOccupied = false");
            BD.setCondition("idPiste = "+idLane);
            int result = BD.Update();
            return result == 1;
            
        } catch (SQLException ex) {
            return false;
        }
    }

}
