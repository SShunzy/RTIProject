/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package IACHAT.Serveur;

import Protocole.IACOP.ConsoleServeurIACOP;
import IACHAT.Application.ThreadListenerIACHAT;
import database.utilities.BDBean;
import java.io.IOException;
import java.net.InetAddress;
import java.net.MulticastSocket;
import java.net.UnknownHostException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.Security;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import org.bouncycastle.jce.provider.BouncyCastleProvider;

/**
 *
 * @author student
 */
public class Serveur_IACHAT extends javax.swing.JFrame implements ConsoleServeurIACOP
{
    public static String MySQLConnexion = "jdbc:mysql://localhost:3306/BD_AIRPORT";
    public static String MySQLUsername = "root";
    public static String MySQLPassword = "rootmysql11";

    private int PORT_MULTICAST = 5001;
    private InetAddress ADDRESS_MULTICAST;
    
    private ThreadListenerIACHAT tListener = null;
    private int portFly;
    private ThreadServeurIACHAT ts;
    private static int NbClient = 10;
    /**
     * Creates new form Serveur_Billets
     */
    public Serveur_IACHAT() 
    {
        this.setTitle("Serveur IACHAT");
        initComponents();
        this.PortTF.setText("25565");
        MulticastSocket mCastSocket = null;
        try {
            ADDRESS_MULTICAST = InetAddress.getByName("234.5.5.9");
            
            mCastSocket = new MulticastSocket(this.PORT_MULTICAST);

            mCastSocket.joinGroup(ADDRESS_MULTICAST);
            System.out.println("On a rejoint le groupe multicast!! Adresse: "+mCastSocket.getInterface() + " port: "+mCastSocket.getPort());
        } catch (UnknownHostException ex) {
            Logger.getLogger(Serveur_IACHAT.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(Serveur_IACHAT.class.getName()).log(Level.SEVERE, null, ex);
        }
        this.setVisible(true);
        tListener = new ThreadListenerIACHAT(mCastSocket,this); tListener.start();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSeparator1 = new javax.swing.JSeparator();
        StartBT = new javax.swing.JButton();
        StopBT = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        ClientTable = new javax.swing.JTable();
        PortTF = new javax.swing.JTextField();
        ServeurL = new javax.swing.JLabel();
        PortL = new javax.swing.JLabel();
        ClientL = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        StartBT.setText("Lancer");
        StartBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StartBTActionPerformed(evt);
            }
        });

        StopBT.setText("Arrêter");
        StopBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StopBTActionPerformed(evt);
            }
        });

        ClientTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Origine", "Tag", "Message"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane3.setViewportView(ClientTable);

        ServeurL.setText("        Serveur");

        PortL.setText("port d'écoute :");

        ClientL.setBackground(new java.awt.Color(255, 255, 0));
        ClientL.setText("         Clients");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addComponent(PortL)
                        .addGap(48, 48, 48)
                        .addComponent(PortTF))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(62, 62, 62)
                        .addComponent(StartBT)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(StopBT)))
                .addGap(61, 61, 61))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSeparator1)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(137, 137, 137)
                        .addComponent(ClientL, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(137, 137, 137)
                        .addComponent(ServeurL, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(ServeurL, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(PortTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(PortL, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(StartBT)
                    .addComponent(StopBT))
                .addGap(27, 27, 27)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ClientL, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void StartBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StartBTActionPerformed
        portFly = Integer.parseInt(PortTF.getText());
        TraceEvenements("\n\rserveur\n\racquisition du port\n\rmain");
        ts = new ThreadServeurIACHAT(portFly, this, NbClient);
        ts.start();
    }//GEN-LAST:event_StartBTActionPerformed

    private void StopBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StopBTActionPerformed
        if(ts!= null)
        {
            if(tListener != null)tListener.interrupt();
            ts.Shutdown();
            this.StopTrace();
        }
    }//GEN-LAST:event_StopBTActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) 
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Serveur_IACHAT.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Serveur_IACHAT.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Serveur_IACHAT.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Serveur_IACHAT.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Serveur_IACHAT().setVisible(true);
            }
        });
    }
    
    @Override
    public void TraceEvenements(String commentaire) 
    {
        String[] splittedComment = commentaire.split("\n\r");
        Vector ligne = new Vector();
        ligne.add(splittedComment[3]);
        ligne.add(splittedComment[2]);
        ligne.add(splittedComment[1]);
        DefaultTableModel dtm = (DefaultTableModel)this.ClientTable.getModel();
        dtm.insertRow(dtm.getRowCount(),ligne);    
    }
    


    
    public void StopTrace()
    {
        DefaultTableModel dtm = (DefaultTableModel) this.ClientTable.getModel();
        for(int i = dtm.getRowCount()-1; i >= 0; i--)
            dtm.removeRow(i);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel ClientL;
    private javax.swing.JTable ClientTable;
    private javax.swing.JLabel PortL;
    private javax.swing.JTextField PortTF;
    private javax.swing.JLabel ServeurL;
    private javax.swing.JButton StartBT;
    private javax.swing.JButton StopBT;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSeparator jSeparator1;
    // End of variables declaration//GEN-END:variables

    @Override
    public boolean isClientValid(String login, Timestamp date, byte[] pwdSalted) {
        System.out.println("isClientValid?");
        Security.addProvider(new BouncyCastleProvider());
        try {
            BDBean BD = new BDBean();
            
            BD.setConnection(Serveur_IACHAT.MySQLConnexion,Serveur_IACHAT.MySQLUsername ,Serveur_IACHAT.MySQLPassword );
            BD.setColumns("nom");
            BD.setTable("Agents");
            BD.setCondition("prenom = '"+login+"'");
            ResultSet rs = BD.Select(false);
            if(!rs.last())return false;
            rs.beforeFirst();
            String pwd = ""; 
            while(rs.next()) pwd = rs.getString(1);
            
            MessageDigest digestPwd;
            digestPwd = MessageDigest.getInstance("SHA-1","BC");
            digestPwd.update(login.getBytes());
            digestPwd.update(date.toGMTString().getBytes());
            return MessageDigest.isEqual(pwdSalted, digestPwd.digest(pwd.getBytes()));

            
        } catch (SQLException ex) {
            Logger.getLogger(Serveur_IACHAT.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(Serveur_IACHAT.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NoSuchProviderException ex) {
            Logger.getLogger(Serveur_IACHAT.class.getName()).log(Level.SEVERE, null, ex);
        }
        return false;
    }

    @Override
    public InetAddress getAddress() {
        return this.ADDRESS_MULTICAST;
    }

    @Override
    public int getPort() {
        return this.PORT_MULTICAST;
    }


   


}
