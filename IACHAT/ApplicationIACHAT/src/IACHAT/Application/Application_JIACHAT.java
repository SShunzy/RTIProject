/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package IACHAT.Application;

import InterfacesRéseaux.ConsoleServeur;
import Protocole.IACOP.ReponseIACOP;
import Protocole.IACOP.RequeteIACOP;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.DatagramPacket;
import java.net.MulticastSocket;
import java.net.Socket;
import java.net.UnknownHostException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.security.Security;
import java.sql.Timestamp;
import java.time.Instant;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import org.bouncycastle.jce.provider.BouncyCastleProvider;

/**
 *
 * @author student
 */
public class Application_JIACHAT extends javax.swing.JFrame implements ConsoleServeur {

    private static final int PORT_FLY = 25565;
    private static final String ADDRESS_FLY = "127.0.0.1";
    
    private MulticastSocket ChatSocket = null;
    private String login;
    private ThreadListenerIACHAT tListener = null;
    
    /**
     * Creates new form NewJFrame
     */
    public Application_JIACHAT() {
        
        Security.addProvider(new BouncyCastleProvider());
        initComponents();
        this.setTitle("Application JIA Chat");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSeparator1 = new javax.swing.JSeparator();
        jTextField1 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        buttonGroup1 = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        MessagePanel = new javax.swing.JTextPane();
        ConnectStatusRB = new javax.swing.JRadioButton();
        LoginTF = new javax.swing.JTextField();
        PasswordPF = new javax.swing.JPasswordField();
        ConnectBT = new javax.swing.JButton();
        LoginL = new javax.swing.JLabel();
        PasswordL = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        MessageTA = new javax.swing.JTextArea();
        SendBT = new javax.swing.JButton();
        codeL = new javax.swing.JLabel();
        ResponseCB = new javax.swing.JCheckBox();
        CodeTF = new javax.swing.JTextField();
        EventCB = new javax.swing.JCheckBox();

        jTextField1.setText("jTextField1");

        jLabel2.setText("jLabel2");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jScrollPane1.setViewportView(MessagePanel);

        ConnectStatusRB.setText("Connecté");
        ConnectStatusRB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConnectStatusRBActionPerformed(evt);
            }
        });

        PasswordPF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PasswordPFActionPerformed(evt);
            }
        });

        ConnectBT.setText("Se Connecter");
        ConnectBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConnectBTActionPerformed(evt);
            }
        });

        LoginL.setText("Login:");

        PasswordL.setText("Mot de passe:");

        MessageTA.setColumns(20);
        MessageTA.setRows(5);
        jScrollPane2.setViewportView(MessageTA);

        SendBT.setText("Envoyer");
        SendBT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SendBTActionPerformed(evt);
            }
        });

        codeL.setText("code:");

        ResponseCB.setText("Répondre");
        ResponseCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ResponseCBActionPerformed(evt);
            }
        });

        CodeTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CodeTFActionPerformed(evt);
            }
        });

        EventCB.setText("Event");
        EventCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EventCBActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(LoginTF, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(LoginL))
                                .addGap(30, 30, 30)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(PasswordPF, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(ConnectBT)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(ConnectStatusRB))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(PasswordL)
                                        .addGap(0, 0, Short.MAX_VALUE))))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane2)
                                .addGap(28, 28, 28)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(4, 4, 4)
                                        .addComponent(SendBT))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(codeL)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(CodeTF))
                                    .addComponent(EventCB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(ResponseCB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LoginL)
                    .addComponent(PasswordL))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(LoginTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(PasswordPF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ConnectBT)
                    .addComponent(ConnectStatusRB))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 122, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(EventCB)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(ResponseCB)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(codeL)
                            .addComponent(CodeTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(SendBT)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void PasswordPFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PasswordPFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_PasswordPFActionPerformed

    private void ConnectBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConnectBTActionPerformed
        // TODO add your handling code here:
        String Login = LoginTF.getText();
        String Password = new String(PasswordPF.getPassword());
        
        if(Login.equals("")){
            JOptionPane.showMessageDialog(this, "Veuillez entrer un login");
        }
        else{
            if(Password.equals("")){
                JOptionPane.showMessageDialog(this, "Veuillez entrer un mot de passe");
            }
            else{
                try {
                    System.out.println("Check login-pasword OK");
                    Socket cliSock = new Socket(ADDRESS_FLY,PORT_FLY);

                    RequeteIACOP req = null;
                    System.out.println("Pre digest");
                    try 
                    {
                        MessageDigest pwdSalted;
                        pwdSalted = MessageDigest.getInstance("SHA-1","BC");
                        pwdSalted.update(Login.getBytes());
                        Timestamp today = Timestamp.from(Instant.now());
                        pwdSalted.update(today.toGMTString().getBytes());
                        req = new RequeteIACOP(RequeteIACOP.LOGIN_GROUP, Login, today, pwdSalted.digest(Password.getBytes()) );
                        System.out.println("Post-digest : Requete cree");
                    } 
                    catch (NoSuchAlgorithmException | NoSuchProviderException ex) 
                    {
                        Logger.getLogger(Application_JIACHAT.class.getName()).log(Level.SEVERE, null, ex);
                    }

                    if(req != null){
                        System.out.println("Envoi de la requete");
                        ObjectOutputStream oos = new ObjectOutputStream(cliSock.getOutputStream());
                        oos.writeObject(req);oos.flush();
                        System.out.println("requete envoyee");

                        ReponseIACOP rep = null;
                        try {
                            ObjectInputStream ois = new ObjectInputStream(cliSock.getInputStream());
                            rep = (ReponseIACOP) ois.readObject();
                        } catch (ClassNotFoundException ex) {
                            Logger.getLogger(Application_JIACHAT.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        if(rep != null){
                            if(rep.getCode() == ReponseIACOP.LOGIN_OK){
                                try{
                                    System.out.println("Message reçu. Addresse: "+rep.getAdresse()+" port: "+rep.getPort());
                                    this.login = LoginTF.getText();
                                    this.ChatSocket = new MulticastSocket(rep.getPort());
                                    this.ChatSocket.joinGroup(rep.getAdresse());
                                    System.out.println("ChatSocket créé. adresse: "+this.ChatSocket.getInetAddress()+" port: "+this.ChatSocket.getPort());

                                    this.ConnectStatusRB.setSelected(true);
                                    tListener = new ThreadListenerIACHAT(this.ChatSocket,this);
                                    tListener.start();
                                    

                                }catch(SecurityException e){
                                    System.out.println("SecurityException caught");
                                }
                                catch(IOException e){
                                    System.out.println("Erreur ? ["+e.getMessage()+"]");
                                }
                            }
                            else{
                                JOptionPane.showMessageDialog(this, "Le login ou le mot de passe est incorrect");
                            }
                        }
                    }

                }catch (UnknownHostException ex) 
                {
                    System.err.println("Erreur ! Host non trouvé [" + ex + "]");
                } catch (IOException ex) {
                    Logger.getLogger(Application_JIACHAT.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }//GEN-LAST:event_ConnectBTActionPerformed

    private void ConnectStatusRBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConnectStatusRBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ConnectStatusRBActionPerformed

    private void SendBTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SendBTActionPerformed
        // TODO add your handling code here:
        if(MessageTA.getText().equals("")){
            JOptionPane.showMessageDialog(this, "Vous n'avez rien écrit\nVeuillez écrire au moins une lettre");
        }
        else{
            
            int tag, codeRequete;
            if(ResponseCB.isSelected()){
                codeRequete = RequeteIACOP.ANSWER_QUESTION;
                tag = Integer.parseInt(CodeTF.getText());
            }
            else if(EventCB.isSelected()){
                codeRequete = RequeteIACOP.POST_EVENT;

                Random rand = new Random();
                tag = rand.nextInt() % 800; //tag d'event < 800
            }
            else{
                codeRequete = RequeteIACOP.POST_QUESTION;
                Random rand = new Random();
                tag = rand.nextInt();
                if(tag < 800) tag+=800; //tag de question > 800
            }

            byte[] digest = null;
            
            try {
                MessageDigest integrityMessage;
                integrityMessage = MessageDigest.getInstance("SHA-1","BC");
                integrityMessage.update(String.valueOf(tag).getBytes());
                integrityMessage.update(login.getBytes());
                digest = integrityMessage.digest(MessageTA.getText().getBytes());

            } catch (NoSuchAlgorithmException | NoSuchProviderException ex) {
                Logger.getLogger(Application_JIACHAT.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            RequeteIACOP req = new RequeteIACOP(codeRequete,MessageTA.getText(),tag,login,digest);
            
            System.out.println("McastSocket address :"+this.ChatSocket.getInetAddress() + "port: "+this.ChatSocket.getPort());
            DatagramPacket DataPack = new DatagramPacket(req.toByteArray(),req.toByteArray().length, this.ChatSocket.getInetAddress(), this.ChatSocket.getPort());
            
            try {
                if(this.ChatSocket.getTimeToLive() != 255)
                    this.ChatSocket.setTimeToLive(255);
                this.ChatSocket.send(DataPack);
                this.MessageTA.setText("");
            } catch (IOException ex) {
                Logger.getLogger(Application_JIACHAT.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
    }//GEN-LAST:event_SendBTActionPerformed

    private void ResponseCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ResponseCBActionPerformed
        // TODO add your handling code here:
        if(!ResponseCB.isSelected()){
            if(EventCB.isSelected())
                EventCB.setSelected(false);
            ResponseCB.setSelected(true);
        }
        else{
            ResponseCB.setSelected(false);
        }
    }//GEN-LAST:event_ResponseCBActionPerformed

    private void CodeTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CodeTFActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CodeTFActionPerformed

    private void EventCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EventCBActionPerformed
        // TODO add your handling code here:
        if(!EventCB.isSelected()){
            if(ResponseCB.isSelected())
                ResponseCB.setSelected(false);
            EventCB.setSelected(true);
        }
        else{
            EventCB.setSelected(false);
        }
    }//GEN-LAST:event_EventCBActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        if(tListener != null) tListener.interrupt();
    }//GEN-LAST:event_formWindowClosing

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Application_JIACHAT.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Application_JIACHAT.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Application_JIACHAT.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Application_JIACHAT.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Application_JIACHAT().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField CodeTF;
    private javax.swing.JButton ConnectBT;
    private javax.swing.JRadioButton ConnectStatusRB;
    private javax.swing.JCheckBox EventCB;
    private javax.swing.JLabel LoginL;
    private javax.swing.JTextField LoginTF;
    private javax.swing.JTextPane MessagePanel;
    private javax.swing.JTextArea MessageTA;
    private javax.swing.JLabel PasswordL;
    private javax.swing.JPasswordField PasswordPF;
    private javax.swing.JCheckBox ResponseCB;
    private javax.swing.JButton SendBT;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel codeL;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables

    @Override
    public void TraceEvenements(String commentaire) {
        String panel = this.MessagePanel.getText();
        
        String[] splittedComment = commentaire.split("\n\r");
        
        String formattedComment = "\n"+splittedComment[3]+"> #"+splittedComment[2]+ " "+splittedComment[1];
        panel += formattedComment;
        this.MessagePanel.setText(panel);
    }
}
